/**
/ run TransactionSearch API call
*
*	@input RequestDataContainer : Object Request data container incapsulates method name and request data object {method : String, data : Object}
*
*	@output ResponseDataContainer : Object Response data container incapsulates response object and service instance {data : Object, service : srv.Service}
*/

var util : Object = require('dw/util');
var system : Object = require('dw/system');
var svc : Object = require('dw/svc');

var paypalHelper : Object = require('~/cartridge/scripts/modules/PaypalHelper.ds');
var prefs : Object = paypalHelper.getPrefs();

function execute( args : PipelineDictionary ) : Number {

	var requestDataContainer : Object = args.RequestDataContainer;
	var method : String = requestDataContainer.method;
	var methodPreferences : Object = prefs.getMethodPreferences(method);
	var logger : system.Log = paypalHelper.getLogger(method);
	var responseData : Object = {};
	var service : svc.Service = null;
	var mergedResponseData : Array = [];

	try {

		service = svc.ServiceRegistry.get(prefs.nvpServiceName);

		//check if result number equal 99, if true run call again (TransactionSearch may return only 100 results per 1 request)
		while (!(responseData.hasOwnProperty('responseAck') && responseData.responseAck === 'Success')) {
			responseData = paypalHelper.call(service, requestDataContainer, logger);
			mergedResponseData = mergedResponseData.concat(responseData.resultArray)
			requestDataContainer.data.STARTDATE = responseData.resultArray[99].timestamp;
		}

	} catch (error) {
		logger.error(error);
	}

	args.ResponseDataContainer = {
		data : mergedResponseData,
		service : service
	};

	return PIPELET_NEXT;
}
