/**
*	Save result of DoExpressCheckout API call and update order data
*
*	@input DoExpressCheckoutResponseContainer : Object parsed response result
*	@input LineItemContainer : dw.order.LineItemCtnr order object
*	@input PaymentInstrument : dw.order.OrderPaymentInstrument current payment instrument
*/

var order : Object = require('dw/order');
var value : Object = require('dw/value');
var util : Object = require('dw/util');
var paypalHelper : Object = require('~/cartridge/scripts/modules/PaypalHelper.ds');

function execute( args : PipelineDictionary ) : Number {

	var responseDataContainer : Object = args.DoExpressCheckoutResponseContainer;
	
	try {
		var test2 = custom_stringify(responseDataContainer.data);
	} catch (e) {
		var a = e;
	}
	
	var responseData : Object = responseDataContainer.data;
	var lineItemContainer : order.LineItemCtnr = args.LineItemContainer;
	var orderPaymentInstruments : util.Collection = lineItemContainer.getPaymentInstruments();
	var paymentInstrument : order.OrderPaymentInstrument = args.PaymentInstrument;
	var paymentTransaction : order.PaymentTransaction = paymentInstrument.getPaymentTransaction();
	var paymentInstrumentIsPaypal : Boolean = paypalHelper.checkPaymentInstruments(orderPaymentInstruments);

	//Set Payment Transaction data
	paymentTransaction.setTransactionID(responseData.paymentinfo_0_transactionid);
	paymentTransaction.setAmount(new value.Money(parseFloat(responseData.paymentinfo_0_amt), responseData.paymentinfo_0_currencycode));
	paymentTransaction.custom.transactionsHistory = [responseData.paymentinfo_0_transactionid]; // Set first order transaction

	//Set Payment Instrument data
	paymentInstrument.custom.paypalAck = responseData.paymentinfo_0_ack;
	paymentInstrument.custom.paypalToken = responseData.token;
	paymentInstrument.custom.paypalPaymentStatus = responseData.paymentinfo_0_paymentstatus;
	paymentInstrument.custom.paypalCorrelationId = responseData.correlationid;

	//Save billing Agreement ID
	if (responseDataContainer.data.hasOwnProperty('billingagreementid') && lineItemContainer.customer.isAuthenticated()) {
		var customerBillingAgreement : Object = paypalHelper.getCustomerBillingAgreement(lineItemContainer.customer);
		customerBillingAgreement.remove(customerBillingAgreement.getDefault().id);
		customerBillingAgreement.add({
			id: responseDataContainer.data.billingagreementid,
			email: paymentInstrument.custom.paypalEmail
		});
	}
	
	paymentInstrument.custom.paypalEmail = null;

	//Change Order Payment Status to Paid if only PayPal was used as payment instrument and payment status is completed from PayPal side
	if (responseData.paymentinfo_0_paymentstatus === 'Completed' && paymentInstrumentIsPaypal) {
		lineItemContainer.setPaymentStatus(order.Order.PAYMENT_STATUS_PAID);
	}

	//Save PayPal payment method
	lineItemContainer.custom.paypalPaymentMethod = 'express';

	return PIPELET_NEXT;
}

function custom_stringify(obj : HashMap){
	var test_obj = {};
	for each (var key in obj.keySet().toArray()) {
        test_obj[key] = obj.get(key);
    }
    
    return JSON.stringify(test_obj);
}
